@page "/testgame"
@using BadgerClan.Web.Components.GameComponents
@rendermode InteractiveServer

<PageTitle>@state.Name</PageTitle>

<button @onclick="RunTurns">Run</button>

<BoardComponent State=state />

<div>@status</div>



@code {

    private GameEngine engine = new GameEngine();
    private GameState state = new GameState();
    private string status = "";
    private int TickInterval = 30;


    private CancellationTokenSource source = new CancellationTokenSource();
    private CancellationToken ShouldStop => source.Token;
    private bool Running = false;

    private List<string> squadUnits = new List<string> { "Knight", "Knight", "Archer", "Archer", "Knight", "Knight" };

    //Remove this eventually, use state.TeamList instead
    private Dictionary<int, Team> teams = new Dictionary<int, Team>();

    protected override Task OnInitializedAsync()
    {
        var newColor = PlayerHelpers.GetRandomColor();

        MakeTeam(new Turtle());
        MakeTeam(new Turtle());
        MakeTeam(new Turtle());
        MakeTeam(new Turtle(2, 2));
        MakeTeam(new RunAndGun());
        MakeTeam(new Turtle());

        state.LayoutStartingPositions(squadUnits);

        //AddBorderUnits(state);

        return Task.CompletedTask;
    }

    private void MakeTeam(IBot bot)
    {
        var color = PlayerHelpers.GetRandomColor();

        var team = new Team($"Team {color}", color, bot);
        state.AddTeam(team);
        teams.Add(team.Id, team);
    }

    private void RunTurns()
    {
        if (Running)
        {
            source.Cancel();
            Running = false;
            return;
        }
        Running = true;
        source = new CancellationTokenSource();

        Task.Run(() => ProcessTurn(), source.Token);
    }

    private async Task ProcessTurn()
    {
        while (Running)
        {
            ShouldStop.ThrowIfCancellationRequested();

            var moves = (await teams[state.CurrentTeamId]?.Bot?.PlanMovesAsync(state))
                ?? new List<Move>();

            GameEngine.ProcessTurn(state, moves);

            Running = state.Running;

            await InvokeAsync(StateHasChanged);

            Thread.Sleep(TickInterval);
        }
    }

    private static void AddBorderUnits(GameState stat)
    {
        var teamid = stat.TeamList[0].Id;
        stat.AddUnits(teamid, Coordinate.Offset(0, 0), new List<string> { "Archer" });
        stat.AddUnits(teamid, Coordinate.Offset(0, 1), new List<string> { "Archer" });
        stat.AddUnits(teamid, Coordinate.Offset(stat.Dimension, 0), new List<string> { "Archer" });
        stat.AddUnits(teamid, Coordinate.Offset(stat.Dimension, 1), new List<string> { "Archer" });
        stat.AddUnits(teamid, Coordinate.Offset(0, stat.Dimension), new List<string> { "Archer" });
        stat.AddUnits(teamid, Coordinate.Offset(0, stat.Dimension-1), new List<string> { "Archer" });
        stat.AddUnits(teamid, Coordinate.Offset(stat.Dimension, stat.Dimension), new List<string> { "Archer" });
        stat.AddUnits(teamid, Coordinate.Offset(stat.Dimension, stat.Dimension-1), new List<string> { "Archer" });
    }
}
