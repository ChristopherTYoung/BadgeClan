@page "/testgame"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>


<script src="/lib/site.js"></script>

<style>
    .battle-field {
        position: relative;
        width: 997px;
        height: 860px;
        background-color: lightblue;
        border: 1px solid black;
    }
</style>

<button @onclick="RunTurns">Run</button>

<div id="square" class="battle-field" style="">
    @foreach (var u in state.Units)
    {
        <UnitComponent Unit=u Team=teams[u.Team] @key=u.Id />
    }
</div>


<div>@status</div>

@* <div>@(Running ? "Running" : "Stopped")</div> *@

@code {

    private GameEngine engine = new GameEngine();
    private GameState state = new GameState();


    private CancellationTokenSource source = new CancellationTokenSource();
    private CancellationToken ShouldStop => source.Token;
    private bool Running = false;
    private string status = "";

    private Dictionary<int, Team> teams = new Dictionary<int, Team>();

    private List<string> teamUnits = new List<string> { "Knight", "Knight", "Archer", "Archer", "Knight", "Knight" };

    protected override Task OnInitializedAsync()
    {


        MakeTeam(1, 20, 10, "red", new RunAndGun());
        MakeTeam(2, 30, 10, "blue", new Turtle());
        MakeTeam(3, 60, 35, "green", new Turtle());
        MakeTeam(4, 10, 30, "yellow", new Turtle(2, 2));
        MakeTeam(5, 50, 20, "orange", new RunAndGun());
        MakeTeam(6, 30, 40, "black", new Turtle());

        @* state.AddTeam(1, Coordinate.Offset(0, 0), new List<string> { "Archer" });
        state.AddTeam(1, Coordinate.Offset(0, 1), new List<string> { "Archer" });

        state.AddTeam(1, Coordinate.Offset(70, 0), new List<string> { "Archer" });
        state.AddTeam(1, Coordinate.Offset(70, 1), new List<string> { "Archer" });

        state.AddTeam(1, Coordinate.Offset(0, 70), new List<string> { "Archer" });
        state.AddTeam(1, Coordinate.Offset(0, 69), new List<string> { "Archer" });

        state.AddTeam(1, Coordinate.Offset(70, 70), new List<string> { "Archer" });
        state.AddTeam(1, Coordinate.Offset(70, 69), new List<string> { "Archer" }); *@


        return Task.CompletedTask;
    }

    private void MakeTeam(int id, int col, int row, string color, IBot bot)
    {
        var loc = Coordinate.Offset(col, row);
        bot.Team = id;

        var team = new Team(id, color, bot);
        state.AddTeam(team);
        state.AddTeam(id, loc, teamUnits);

        teams.Add(id, team);
    }

    private void RunTurns()
    {
        if (Running)
        {
            source.Cancel();
            Running = false;
            return;
        }
        Running = true;
        source = new CancellationTokenSource();

        Task.Run(() => ProcessTurn(), source.Token);
    }

    private void ProcessTurn()
    {
        while (Running)
        {
            ShouldStop.ThrowIfCancellationRequested();
            var moves = teams[state.CurrentTeam].Bot.PlanMoves(state);

            state = engine.ProcessTurn(state, moves);
            var man = state.Units.FirstOrDefault();

            status = state.ToString();

            Running = state.Running;

            InvokeAsync(StateHasChanged);

            Thread.Sleep(10);
        }

    }


}
