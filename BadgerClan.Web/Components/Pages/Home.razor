@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>


<script src="/lib/site.js"></script>

<style>
    .battle-field {
        position: relative;
        width: 1000px;
        height: 1000px;
        background-color: lightblue;
        border: 1px solid black;
    }
</style>

<button @onclick="RunTurns">Run</button>

<div id="square" class="battle-field" style="">
</div>

<div>@status</div>

@* <div>@(Running ? "Running" : "Stopped")</div> *@

@code {

    private int dimension = 10;
    private double root3 = Math.Sqrt(3.0);
    private GameEngine engine = new GameEngine();
    private GameState state = new GameState();

    private bool Running = false;
    private string status = "";

    private Dictionary<int, Team> teams = new Dictionary<int, Team>();
    private Dictionary<string, string> iconLookup = new Dictionary<string, string>();

    private List<string> teamUnits = new List<string> { "Knight", "Knight", "Archer", "Archer", "Knight", "Knight" };

    protected override Task OnInitializedAsync()
    {
        iconLookup.Add("Knight", "/images/pikeman.svg");
        iconLookup.Add("Archer", "/images/archer.svg");

        MakeTeam(1, 6, 14, "red", new Turtle());
        MakeTeam(2, 30, 10, "blue", new Turtle());
        MakeTeam(3, 10, 60, "green", new Turtle());
        MakeTeam(4, 10, 30, "yellow", new Turtle());
        MakeTeam(5, 50, 20, "orange", new Turtle(1, 2));
        MakeTeam(6, 30, 40, "black", new Turtle());

        return Task.CompletedTask;
    }

    private void MakeTeam(int id, int col, int row, string color, IBot bot)
    {
        var loc = Coordinate.Offset(col, row);
        bot.Team = id;

        state.AddTeam(id, loc, teamUnits);

        var team = new Team(id, color, bot);
        teams.Add(id, team);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        DrawUnits(state);
    }

    private void RunTurns()
    {
        Running = !Running;

        if (Running)
            ProcessTurn();
    }

    private async void ProcessTurn()
    {
        while (Running)
        {
            var moves = teams[state.CurrentTeam].Bot.PlanMoves(state);

            state = engine.ProcessTurn(state, moves);
            var man = state.Units.FirstOrDefault();

            status = state.ToString();

            DrawUnits(state);
            Running = state.Running;

            Thread.Sleep(150);
        }

    }

    private void DrawUnits(GameState state)
    {
        JSRuntime.InvokeVoidAsync("clearIcons", "square");
        foreach (var unit in state.Units)
        {
            var color = teams[unit.Team].Color;

            var image = iconLookup[unit.Type];
            var x = (int)(dimension * (root3 * unit.Location.Q + root3 / 2.0 * unit.Location.R));
            var y = (int)(dimension * ((3.0 / 2) * unit.Location.R));
            var con = new Icon(image, x, y, 20, 20, color);
            PlaceIcon(con);
        }

    }

    private void PlaceIcon(Icon icon)
    {
        try
        {
            JSRuntime.InvokeVoidAsync("createIconDiv", "square", icon.Url, icon.X, icon.Y, icon.Width, icon.Height, icon.color);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error placing icons: {ex.Message}");
        }
    }

    private record Icon(string Url, int X, int Y, int Width, int Height, string color);
}
