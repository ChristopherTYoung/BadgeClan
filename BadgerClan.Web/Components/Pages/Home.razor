@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>


<script src="/lib/site.js"></script>

<style>
    .battle-field {
        position: relative;
        width: 1000px;
        height: 1000px;
        background-color: lightblue;
        border: 1px solid black;
    }
</style>

<button @onclick="ProcessTurn">Process Turn</button>

<div id="square" class="battle-field" style="">
</div>

<div>@status</div>


@code {

    private int dimension = 10;
    private double root3 = Math.Sqrt(3.0);
    private GameEngine engine = new GameEngine();
    private GameState state = new GameState();

    private string status ="";

    private Dictionary<string, string> iconLookup = new Dictionary<string, string>();

    protected override Task OnInitializedAsync()
    {
        iconLookup.Add("Knight", "/images/pikeman.svg");
        iconLookup.Add("Archer", "/images/archer.svg");

        var team = new List<string>();

        team = new List<string> { "Archer", "Archer", "Knight", "Knight", "Knight", "Knight" };
        state.AddTeam(1, Coordinate.Offset(10, 10), team);
        team = new List<string> { "Knight", "Knight", "Knight", "Knight", "Archer", "Archer" };
        state.AddTeam(2, Coordinate.Offset(30, 30), team);

        return Task.CompletedTask;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        DrawUnits(state);

    }

    private void ProcessTurn()
    {
        var moves = MoveGenetator.MakeList(state.CurrentTeam, state);
        state = engine.ProcessTurn(state, moves);
        var man = state.Units.FirstOrDefault();
        
        status = state.ToString();
        
        
        DrawUnits(state);
    }

    private void DrawUnits(GameState state)
    {
        JSRuntime.InvokeVoidAsync("clearIcons", "square");
        foreach (var unit in state.Units)
        {
            var image = iconLookup[unit.Type];
            var x = (int)(dimension * (root3 * unit.Location.Q + root3 / 2.0 * unit.Location.R));
            var y = (int)(dimension * ((3.0 / 2) * unit.Location.R));
            var con = new Icon(image, x, y, 20, 20);
            PlaceIcon(con);
        }

    }

    private void PlaceIcon(Icon icon)
    {
        try
        {
            JSRuntime.InvokeVoidAsync("createIconDiv", "square", icon.Url, icon.X, icon.Y, icon.Width, icon.Height);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error placing icons: {ex.Message}");
        }
    }

    private record Icon(string Url, int X, int Y, int Width, int Height);
}
