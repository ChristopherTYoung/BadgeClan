@page "/game"
@using BadgerClan.Web.Components.GameComponents
@rendermode InteractiveServer

<PageTitle>@state.Name</PageTitle>

@* I think I created this page in error. Jonathan seems to already have made this. *@

<button @onclick="RunTurns">Run</button>

<BoardComponent State=state Teams=teams />

<div>@status</div>



@code {

    private GameEngine engine = new GameEngine();
    private GameState state = new GameState();
    private string status = "";


    private CancellationTokenSource source = new CancellationTokenSource();
    private CancellationToken ShouldStop => source.Token;
    private bool Running = false;

    private List<string> squadUnits = new List<string> { "Knight", "Knight", "Archer", "Archer", "Knight", "Knight" };

    //Remove this eventually
    private Dictionary<int, Team> teams = new Dictionary<int, Team>();

    protected override Task OnInitializedAsync()
    {
        MakeTeam(1, "red", new RunAndGun());
        MakeTeam(2, "blue", new Turtle(), "/api/");
        MakeTeam(3, "green", new Turtle());
        MakeTeam(4, "yellow", new Turtle(2, 2));
        MakeTeam(5, "orange", new RunAndGun());
        MakeTeam(6, "black", new Turtle());

        state.StartGame(squadUnits);

        @* state.AddTeam(1, Coordinate.Offset(0, 0), new List<string> { "Archer" });
        state.AddTeam(1, Coordinate.Offset(0, 1), new List<string> { "Archer" });

        state.AddTeam(1, Coordinate.Offset(state.Dimension, 0), new List<string> { "Archer" });
        state.AddTeam(1, Coordinate.Offset(state.Dimension, 1), new List<string> { "Archer" });

        state.AddTeam(1, Coordinate.Offset(0, state.Dimension), new List<string> { "Archer" });
        state.AddTeam(1, Coordinate.Offset(0, state.Dimension-1), new List<string> { "Archer" });

        state.AddTeam(1, Coordinate.Offset(state.Dimension, state.Dimension), new List<string> { "Archer" });
        state.AddTeam(1, Coordinate.Offset(state.Dimension, state.Dimension-1), new List<string> { "Archer" }); *@

        return Task.CompletedTask;
    }

    private void MakeTeam(int id, string color, IBot bot, string url = "")
    {
        bot.Team = id;

        var team = !string.IsNullOrEmpty(url)
            ? new Team(id, $"Team {id}", color, url)
            : new Team(id, $"Team {id}", color, bot);
        state.AddTeam(team);
        teams.Add(id, team);
    }

    private void RunTurns()
    {
        if (Running)
        {
            source.Cancel();
            Running = false;
            return;
        }
        Running = true;
        source = new CancellationTokenSource();

        Task.Run(() => ProcessTurn(), source.Token);
    }

    private void ProcessTurn()
    {
        while (Running)
        {
            ShouldStop.ThrowIfCancellationRequested();

            var moves = new List<Move>();
            var team = teams[state.CurrentTeam];
            if (team != null)
            {
                if (!string.IsNullOrEmpty(team.BotEndpoint))
                    moves = CallEndPoint(team.BotEndpoint, state);
                else if (team.Bot != null)
                    moves = team.Bot.PlanMoves(state);
            }

            state = engine.ProcessTurn(state, moves);
            var man = state.Units.FirstOrDefault();

            status = state.ToString();

            Running = state.Running;

            InvokeAsync(StateHasChanged);

            Thread.Sleep(30);
        }
    }

    private static List<Move> CallEndPoint(string url, GameState state)
    {
        return new List<Move>();
    }
}
